#. extracted from ch0.txt
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-26 22:15+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 2.3.1\n"

#: ch0.txt:5
msgid ""
"Building Microservices with Go \n"
"Develop seamless, efficient, and robust microservices with Go \n"
"Nic Jackson "
msgstr ""

#: ch0.txt:7
msgid "BIRMINGHAM - MUMBAI "
msgstr ""

#: ch0.txt:18
msgid ""
"Building Microservices with Go \n"
"Copyright . 2017 Packt Publishing \n"
"All rights reserved. No part of this book may be reproduced, stored in a "
"retrieval system, or transmitted in any form or by any means, without the "
"prior written permission of the publisher, except in the case of brief "
"quotations embedded in critical articles or reviews. \n"
"Every effort has been made in the preparation of this book to ensure the "
"accuracy of the information presented. However, the information contained in "
"this book is sold without warranty, either express or implied. Neither the "
"author, nor Packt Publishing, and its dealers and distributors will be held "
"liable for any damages caused or alleged to be caused directly or indirectly "
"by this book. \n"
"Packt Publishing has endeavored to provide trademark information about all "
"of the companies and products mentioned in this book by the appropriate use "
"of capitals. However, Packt Publishing cannot guarantee the accuracy of this "
"information. \n"
"First published: July 2017 \n"
"Production reference: 1250717 \n"
"Published by Packt Publishing Ltd.Livery Place35 Livery StreetBirminghamB3 "
"2PB, UK. \n"
"ISBN 978-1-78646-866-6 \n"
"www.packtpub.com "
msgstr ""

#: ch0.txt:34
msgid ""
"Credits \n"
"Author  Copy Editor  \n"
"Nic Jackson  Karuna Narayan  \n"
"Reviewers  Project Coordinator  \n"
"Magnus Larsson  Vaidehi Sawant  \n"
"Erik Lupander  \n"
"Commissioning Editor  Proofreader  \n"
"Kunal Parikh  Safis Editing  \n"
"Acquisition Editor  Indexer  \n"
"Karan Sadawana  Francy Puthiry  \n"
"Content Development Editor  Graphics  \n"
"Zeeyan Pinheiro  Jason Monteiro  \n"
"Technical Editor  Production Coordinator  \n"
"Vivek Pala  Nilesh Mohite  "
msgstr ""

#: ch0.txt:39
msgid ""
"About the Author \n"
"Nic Jackson is a developer advocate working for HashiCorp.com; he has over "
"20 years, experience in software development and leading software "
"development teams. A huge fan of mobile application and microservice "
"architecture, he is constantly looking out for the most efficient way to "
"reuse code and improve development flow. \n"
"In his spare time, Nic coaches and mentors at Coder Dojo teaches at Women "
"Who Go and GoBridge, speaks and evangelizes good coding practice, process, "
"and technique. "
msgstr ""

#: ch0.txt:50
msgid ""
"About the Reviewers \n"
"Magnus Larsson has been in the IT business since 1986. He is an experienced "
"architect in areas such as distributed systems, systems integration, and "
"SOA. He is currently engaged in exploring the benefits of modern "
"technologies such as microservices, container technologies, reactive "
"frameworks, and mobile solutions. \n"
"Magnus has a special dedication to the open source community for Java and "
"has been active in various projects over the years. He enjoys exploring "
"other languages and currently finds the Go language very interesting for "
"building microservices. He is also a frequent speaker at conferences such as "
"Cadec, Spring I/O, Jfokus, and jDays. \n"
"Magnus lives outside Gothenburg, Sweden, with his family. When time permits, "
"he enjoys cross-country skiing, which must be done either on roller skis or "
"indoors, in the Gothenburg area for most of the year. \n"
"He has worked for large corporations such as Digital Equipment Corporation, "
"AstraZeneca, and Ericsson Hewlett Packard Telecom over the years. In 2000, "
"Magnus co-founded Callista Enterprise AB, a Swedish-based consultancy "
"company specialized in software architecture. \n"
"Erik Lupander is a software architect and developer with over 15 years of "
"professional experience. A lifelong computer and software enthusiast, he "
"wrote his first GW-BASIC programs at the age of 7 back in the mid-80s. \n"
"Erik holds an M.Sc. in applied informatics from the University of Gothenburg "
"and has worked in a variety of roles in the software industry ever since. "
"While JVM-based languages and architecture has been his bread and butter, he "
"is a polyglot software craftsman at heart who, among other technologies, has "
"embraced the Go programming language and microservice architecture. \n"
"Erik has spoken at software conferences such as Scandev (2012), dev:mobile "
"(2014), and Cadec (2016, 2017) about topics ranging from OpenGL ES to Golang "
"and microservices. \n"
"He lives just outside Gothenburg, Sweden, with his wife and two children. "
"Aside from family, computers, and software, he enjoys alpine skiing, golf, "
"and running, and he is an avid supporter of IFK Gothenburg. \n"
"Erik is currently employed by Callista Enterprise AB, a Swedish-based "
"consultancy specialized in software architecture. His previous employers "
"include Siemens Medical Solutions, Epsilon IT, University of Gothenburg, and "
"Squeed AB. "
msgstr ""

#: ch0.txt:55
msgid ""
"www.PacktPub.com \n"
"For support files and downloads related to your book, please visit "
"www.PacktPub.com. \n"
"Did you know that Packt offers eBook versions of every book published, with "
"PDF and ePub files available? You can upgrade to the eBook version at "
"www.PacktPub.comand as a print book customer, you are entitled to a discount "
"on the eBook copy. Get in touch with us at service@packtpub.com for more "
"details. \n"
"At www.PacktPub.com, you can also read a collection of free technical "
"articles, sign up for a range of free newsletters and receive exclusive "
"discounts and offers on Packt books and eBooks. "
msgstr ""

#: ch0.txt:60
msgid ""
"https://www.packtpub.com/mapt \n"
"Get the most in-demand software skills with Mapt. Mapt gives you full access "
"to all Packt books and video courses, as well as industry-leading tools to "
"help you plan your personal development and advance your career. \n"
"Why subscribe? \n"
"Fully searchable across every book published by Packt Copy and paste, print, "
"and bookmark content On demand and accessible via a web browser "
msgstr ""

#: ch0.txt:65
msgid ""
"Customer Feedback \n"
"Thanks for purchasing this Packt book. At Packt, quality is at the heart of "
"our editorial process. To help us improve, please leave us an honest review "
"on this book's Amazon page at https://www.amazon.com/dp/1786468662. \n"
"If you'd like to join our team of regular reviewers, you can e-mail us at "
"customerreviews@packtpub.com. We award our regular reviewers with free "
"eBooks and videos in exchange for their valuable feedback. Help us be "
"relentless in improving our products! "
msgstr ""

#: ch0.txt:68
msgid ""
"Table of Contents \n"
"Preface "
msgstr ""

#: ch0.txt:135
msgid ""
"Chapter 1: Introduction to Microservices \n"
"7 \n"
"Building a simple web server with net/http \n"
"7 \n"
"Reading and writing JSON \n"
"10 \n"
"Marshalling Go structs to JSON \n"
"10 \n"
"Unmarshalling JSON to Go structs \n"
"15 \n"
"Routing in net/http \n"
"18 \n"
"Paths \n"
"19 \n"
"Convenience handlers \n"
"20 \n"
"FileServer \n"
"21 \n"
"NotFoundHandler \n"
"21 \n"
"RedirectHandler \n"
"21 \n"
"StripPrefix \n"
"21 \n"
"TimeoutHandler \n"
"22 \n"
"Static file handler \n"
"22 \n"
"Creating handlers \n"
"23 \n"
"Context \n"
"25 \n"
"Background \n"
"25 \n"
"WithCancel \n"
"25 \n"
"WithDeadline \n"
"25 \n"
"WithTimeout \n"
"26 \n"
"WithValue \n"
"26 \n"
"Using contexts \n"
"26 \n"
"RPC in the Go standard library \n"
"29 \n"
"Simple RPC example \n"
"29 \n"
"RPC over HTTP \n"
"33 \n"
"JSON-RPC over HTTP \n"
"34 \n"
"Summary \n"
"36 \n"
"Chapter 2: Designing a Great API \n"
"37 \n"
"RESTful APIs \n"
"37 \n"
"URIs \n"
"38 \n"
"URI format \n"
"38 \n"
"URI path design for REST services \n"
"39 \n"
"Collections \n"
"39 "
msgstr ""

#: ch0.txt:230
msgid ""
"Documents \n"
"40 \n"
"Controller \n"
"40 \n"
"Store \n"
"40 \n"
"CRUD function names \n"
"41 \n"
"HTTP verbs \n"
"41 \n"
"GET \n"
"41 \n"
"POST \n"
"42 \n"
"PUT \n"
"42 \n"
"PATCH \n"
"43 \n"
"DELETE \n"
"43 \n"
"HEAD \n"
"44 \n"
"OPTIONS \n"
"44 \n"
"URI query design \n"
"45 \n"
"Response codes \n"
"45 \n"
"2xx Success \n"
"48 \n"
"200 OK \n"
"48 \n"
"201 Created \n"
"48 \n"
"204 No Content \n"
"48 \n"
"3xx Redirection \n"
"48 \n"
"301 Moved Permanently \n"
"49 \n"
"304 Not Modified \n"
"49 \n"
"4xx Client Error \n"
"49 \n"
"400 Bad Request \n"
"49 \n"
"401 Unauthorized \n"
"49 \n"
"403 Forbidden \n"
"50 \n"
"404 Not Found \n"
"50 \n"
"405 Method Not Allowed \n"
"50 \n"
"408 Request Timeout \n"
"50 \n"
"5xx Server Error \n"
"50 \n"
"500 Internal Server Error \n"
"51 \n"
"503 Service Unavailable \n"
"51 \n"
"HTTP headers \n"
"51 \n"
"Standard request headers \n"
"51 \n"
"Authorization - string \n"
"52 \n"
"Date \n"
"52 \n"
"Accept - content type \n"
"52 \n"
"Accept-Encoding - gzip, deflate \n"
"53 \n"
"Standard response headers \n"
"55 \n"
"Returning errors \n"
"55 \n"
"Accessing APIs from JavaScript \n"
"57 \n"
"JSONP \n"
"57 \n"
"CORS \n"
"59 \n"
"RPC APIs \n"
"60 \n"
"RPC API design \n"
"61 \n"
"RPC message frameworks \n"
"62 \n"
"Gob \n"
"62 \n"
"Thrift \n"
"62 "
msgstr ""

#: ch0.txt:314
msgid ""
"[ ii ] \n"
"Protocol Buffers \n"
"63 \n"
"JSON-RPC \n"
"64 \n"
"Filtering \n"
"65 \n"
"Versioning APIs \n"
"65 \n"
"Semantic versioning \n"
"66 \n"
"Versioning formats for REST APIs \n"
"67 \n"
"Versioning formats for RPC APIs \n"
"67 \n"
"Naming for RPC \n"
"67 \n"
"Object type standardization \n"
"68 \n"
"Dates \n"
"69 \n"
"Durations \n"
"70 \n"
"Intervals \n"
"70 \n"
"Documenting APIs \n"
"71 \n"
"REST based-based APIs \n"
"71 \n"
"Swagger \n"
"71 \n"
"API Blueprint \n"
"72 \n"
"RAML \n"
"73 \n"
"RPC based-based APIs \n"
"73 \n"
"Summary \n"
"74 \n"
"Chapter 3: Introducing Docker \n"
"75 \n"
"Introducing Containers with Docker \n"
"75 \n"
"Installing Docker \n"
"76 \n"
"Running our first container \n"
"77 \n"
"Docker volumes \n"
"81 \n"
"Union filesystem \n"
"81 \n"
"Mounting volumes \n"
"81 \n"
"Docker ports \n"
"82 \n"
"Removing a container starting with an explicit name \n"
"84 \n"
"Docker networking \n"
"84 \n"
"Bridge networking \n"
"84 \n"
"Host networking \n"
"85 \n"
"No network \n"
"85 \n"
"Overlay network \n"
"86 \n"
"Custom network drivers \n"
"86 \n"
"Weaveworks \n"
"86 \n"
"Project Calico \n"
"87 \n"
"Creating custom bridge networks \n"
"87 \n"
"Creating a bridge network \n"
"87 \n"
"Connecting containers to a custom network \n"
"88 \n"
"Writing Dockerfiles \n"
"89 \n"
"Building application code for Docker \n"
"89 "
msgstr ""

#: ch0.txt:398
msgid ""
"[ iii ] \n"
"FROM \n"
"90 \n"
"MAINTAINER \n"
"90 \n"
"EXPOSE \n"
"90 \n"
"COPY \n"
"91 \n"
"ENTRYPOINT \n"
"91 \n"
"CMD \n"
"92 \n"
"Good practice for creating Dockerfiles \n"
"92 \n"
"Building images from Dockerfiles \n"
"93 \n"
"Docker build context \n"
"94 \n"
"Docker Ignore files \n"
"94 \n"
"Running Daemons in containers \n"
"95 \n"
"Docker Compose \n"
"95 \n"
"Installing Docker Compose on Linux \n"
"95 \n"
"Service startup \n"
"97 \n"
"Specifying the location of a compose file \n"
"98 \n"
"Specifying a project name \n"
"98 \n"
"Summary \n"
"99 \n"
"Chapter 4: Testing \n"
"100 \n"
"The testing pyramid \n"
"101 \n"
"Outside-in development \n"
"102 \n"
"Unit tests \n"
"103 \n"
"httptest.NewRequest \n"
"105 \n"
"httptest.NewRecorder \n"
"105 \n"
"Dependency injection and mocking \n"
"108 \n"
"Code coverage \n"
"111 \n"
"Behavioral Driven Development \n"
"113 \n"
"Testing with Docker Compose \n"
"118 \n"
"Benchmarking and profiling \n"
"121 \n"
"Benchmarks \n"
"121 \n"
"Profiling \n"
"123 \n"
"Summary \n"
"129 \n"
"Chapter 5: Common Patterns \n"
"130 \n"
"Design for failure \n"
"131 \n"
"Patterns \n"
"133 \n"
"Event processing \n"
"133 \n"
"Event processing with at least once delivery \n"
"134 \n"
"Handling Errors \n"
"135 \n"
"Dead Letter Queue \n"
"136 \n"
"Idempotent transactions and message order \n"
"137 \n"
"Atomic transactions \n"
"138 \n"
"Timeouts \n"
"139 "
msgstr ""

#: ch0.txt:478
msgid ""
"[ iv ] \n"
"Back off \n"
"140 \n"
"Circuit breaking \n"
"142 \n"
"Health checks \n"
"145 \n"
"Throttling \n"
"149 \n"
"Service discovery \n"
"152 \n"
"Server-side service discovery \n"
"153 \n"
"Client-side service discovery \n"
"154 \n"
"Load balancing \n"
"156 \n"
"Caching \n"
"157 \n"
"Premature optimization \n"
"159 \n"
"Stale cache in times of database or downstream service failure \n"
"160 \n"
"Summary \n"
"160 \n"
"Chapter 6: Microservice Frameworks \n"
"161 \n"
"What makes a good microservice framework? \n"
"161 \n"
"Micro \n"
"167 \n"
"Setup \n"
"168 \n"
"Code generation \n"
"168 \n"
"Tooling (CI/CD, cross platform) \n"
"170 \n"
"Maintainable \n"
"171 \n"
"Format (REST/RPC) \n"
"171 \n"
"Patterns \n"
"172 \n"
"Language independence \n"
"172 \n"
"Ability to interface with other frameworks \n"
"173 \n"
"Efficiency \n"
"174 \n"
"Quality \n"
"175 \n"
"Open source \n"
"175 \n"
"Security \n"
"175 \n"
"Support \n"
"175 \n"
"Extensibility \n"
"175 \n"
"What we learned about Micro \n"
"176 \n"
"Kite \n"
"176 \n"
"Setup \n"
"177 \n"
"Code generation \n"
"179 \n"
"Tooling \n"
"179 \n"
"Maintainable \n"
"179 \n"
"Format \n"
"180 \n"
"Patterns \n"
"180 \n"
"Language independence \n"
"181 \n"
"Efficiency \n"
"181 "
msgstr ""

#: ch0.txt:558
msgid ""
"[ v ] \n"
"Quality \n"
"182 \n"
"Open source \n"
"182 \n"
"Security \n"
"182 \n"
"Support \n"
"183 \n"
"Extensibility \n"
"183 \n"
"Summing up Kite \n"
"183 \n"
"gRPC \n"
"184 \n"
"Setup \n"
"184 \n"
"Code generation \n"
"185 \n"
"Tooling \n"
"187 \n"
"Maintainable \n"
"187 \n"
"Format \n"
"188 \n"
"Patterns \n"
"188 \n"
"Language independence \n"
"188 \n"
"Efficiency \n"
"189 \n"
"Quality \n"
"190 \n"
"Open source \n"
"191 \n"
"Security \n"
"191 \n"
"Support \n"
"191 \n"
"Extensibility \n"
"191 \n"
"A few lines about gRPC \n"
"191 \n"
"Summary \n"
"192 \n"
"Chapter 7: Logging and Monitoring \n"
"193 \n"
"Logging best practices \n"
"194 \n"
"Metrics \n"
"195 \n"
"Types of data best represented by metrics \n"
"196 \n"
"Naming conventions \n"
"196 \n"
"Storage and querying \n"
"199 \n"
"Software as a service \n"
"199 \n"
"Self-hosted \n"
"200 \n"
"Grafana \n"
"201 \n"
"Logging \n"
"206 \n"
"Distributed tracing with Correlation IDs \n"
"206 \n"
"Elasticsearch, Logstash, and Kibana (ELK) \n"
"207 \n"
"Kibana \n"
"209 \n"
"Exceptions \n"
"214 \n"
"Panic and recover \n"
"214 \n"
"Panic \n"
"214 \n"
"Recover \n"
"214 "
msgstr ""

#: ch0.txt:562
msgid ""
"[ vi ] \n"
"Summary \n"
"216 "
msgstr ""

#: ch0.txt:573
msgid ""
"Chapter 8: Security \n"
"217 \n"
"Encryption and signing \n"
"217 \n"
"Symmetric-key encryption \n"
"218 \n"
"Public-key cryptography \n"
"218 \n"
"Digital signatures \n"
"218 "
msgstr ""

#: ch0.txt:646
msgid ""
"X.509 digital certificates \n"
"219 \n"
"TLS/SSL \n"
"219 \n"
"External security \n"
"220 \n"
"Layer 2 or 3 firewalls \n"
"221 \n"
"Web application firewall \n"
"223 \n"
"API Gateway \n"
"224 \n"
"DDoS protection \n"
"225 \n"
"Types of DDoS attack \n"
"225 \n"
"UDP fragment attack \n"
"226 \n"
"UDP flood \n"
"226 \n"
"DNS \n"
"226 \n"
"NTP \n"
"227 \n"
"CHARGEN \n"
"227 \n"
"SYN flood \n"
"227 \n"
"SSDP \n"
"227 \n"
"ACK \n"
"228 \n"
"Application security \n"
"228 \n"
"Prevention \n"
"229 \n"
"Detection \n"
"229 \n"
"Response \n"
"230 \n"
"Recovery \n"
"230 \n"
"Confused deputy \n"
"230 \n"
"How an attacker could bypass the firewall \n"
"231 \n"
"Scenario \n"
"231 \n"
"Attack \n"
"231 \n"
"Input validation \n"
"232 \n"
"Fuzzing \n"
"233 \n"
"TLS \n"
"234 \n"
"Generating private keys \n"
"234 \n"
"Generating X.509 certificates \n"
"237 \n"
"Securing data at rest \n"
"242 \n"
"Physical machine access \n"
"243 \n"
"OWASP \n"
"244 \n"
"Never storing session tokens in a URL \n"
"244 \n"
"Cross-site scripting (XSS) and cross-site request forgery (CRSF) \n"
"244 \n"
"Insecure direct object references \n"
"245 "
msgstr ""

#: ch0.txt:730
msgid ""
"[ vii ] \n"
"Authentication and authorization \n"
"245 \n"
"Password hashing \n"
"246 \n"
"Adding a little seasoning \n"
"246 \n"
"Dictionary attacks \n"
"248 \n"
"Adding a pepper \n"
"248 \n"
"bcrypt \n"
"249 \n"
"Benchmarks \n"
"249 \n"
"JWTs \n"
"250 \n"
"Format of a JWT \n"
"250 \n"
"Secure messages \n"
"254 \n"
"Shared secrets \n"
"256 \n"
"Asymmetric encryption with large messages \n"
"258 \n"
"Maintenance \n"
"259 \n"
"Patching containers \n"
"259 \n"
"Software updates \n"
"260 \n"
"Patching application code \n"
"260 \n"
"Logging \n"
"260 \n"
"Summary \n"
"261 \n"
"Chapter 9: Event-Driven Architecture \n"
"262 \n"
"Differences between synchronous and asynchronous processing \n"
"262 \n"
"Synchronous processing \n"
"264 \n"
"Asynchronous processing \n"
"265 \n"
"Types of asynchronous messages \n"
"266 \n"
"Pull/queue messaging \n"
"266 \n"
"Push messaging \n"
"272 \n"
"Command Query Responsibility Segregation (CQRS) \n"
"276 \n"
"Domain-Driven Design \n"
"280 \n"
"What is DDD? \n"
"281 \n"
"Technical debt \n"
"282 \n"
"Anatomy of DDD \n"
"282 \n"
"Strategic design \n"
"282 \n"
"Tactical design \n"
"283 \n"
"Ubiquitous language \n"
"283 \n"
"Bounded Contexts \n"
"284 \n"
"Context Mapping \n"
"284 \n"
"Software \n"
"285 \n"
"Kafka \n"
"285 \n"
"NATS.io \n"
"285 \n"
"AWS SNS/SQS \n"
"286 \n"
"Google Cloud Pub/Sub \n"
"287 \n"
"Summary \n"
"287 "
msgstr ""

#: ch0.txt:732
msgid "[ viii ] "
msgstr ""

#: ch0.txt:736
msgid ""
"Chapter 10: Continuous Delivery \n"
"288 "
msgstr ""

#: ch0.txt:811
msgid ""
"What is Continuous Delivery? \n"
"288 \n"
"Manual deployment \n"
"289 \n"
"The benefits of continuous delivery \n"
"291 \n"
"Aspects of continuous delivery \n"
"291 \n"
"Reproducibility and consistency \n"
"292 \n"
"Artifact storage \n"
"293 \n"
"Automation of tests \n"
"293 \n"
"Automation of integration tests \n"
"293 \n"
"Infrastructure as code \n"
"293 \n"
"Security scanning \n"
"294 \n"
"Static code analysis \n"
"294 \n"
"Smoke tests \n"
"294 \n"
"End-to-end tests \n"
"295 \n"
"Monitoring \n"
"295 \n"
"Continuous delivery process \n"
"295 \n"
"Overview \n"
"296 \n"
"What is container orchestration? \n"
"297 \n"
"Options for container orchestration \n"
"297 \n"
"What is immutable infrastructure? \n"
"298 \n"
"Terraform \n"
"298 \n"
"Providers \n"
"300 \n"
"Terraform config entry point \n"
"302 \n"
"VPC module \n"
"303 \n"
"Output variables \n"
"309 \n"
"Creating the infrastructure \n"
"311 \n"
"Example application \n"
"312 \n"
"Continuous delivery workflow \n"
"313 \n"
"Build \n"
"317 \n"
"Testing \n"
"318 \n"
"Benchmarking \n"
"319 \n"
"Static code analysis \n"
"320 \n"
"Integration tests \n"
"321 \n"
"Deployment \n"
"322 \n"
"Smoke tests \n"
"323 \n"
"Monitoring/alerting \n"
"324 \n"
"Complete workflow \n"
"325 \n"
"Summary \n"
"326 "
msgstr ""

#: ch0.txt:815
msgid ""
"Index \n"
"327 "
msgstr ""

#: ch0.txt:817
msgid "[ ix ] "
msgstr ""

#: ch0.txt:838
msgid ""
"Preface \n"
"Microservice architecture is sweeping the world as the de facto pattern for "
"building web-based applications. Golang is a language particularly well "
"suited to building them. Its strong community, encouragement of idiomatic "
"style, and statically-linked binary artifacts make integrating it with other "
"technologies and managing microservices at scale consistent and intuitive. "
"This book will teach you the common patterns and practices, and show you how "
"to apply these using the Go programming language. \n"
"It will teach you the fundamental concepts of architectural design and "
"RESTful communication, and introduce you to the patterns that provide "
"manageable code that is supportable in development and at scale in "
"production. We will provide you with examples of how to put these concepts "
"and patterns into practice with Go. \n"
"Whether you are planning a new application or working in an existing "
"monolith, this book will explain and illustrate with practical examples how "
"teams of all sizes can start solving problems with microservices. It will "
"help you understand Docker and Docker Compose, and how they can be used to "
"isolate microservice dependencies and build environments. We will conclude "
"by showing you various techniques to monitor, test, and secure your "
"microservices. \n"
"By the end, you will know the benefits of the system resilience of a "
"microservice and the advantages of the Go stack. \n"
"What this book covers \n"
"Chapter 1, Introduction to Microservices, looks at what makes the Go "
"language suitable for building microservices and takes a look at the "
"standard library that has all the components required to build a basic "
"microservice. Looking at the standard elements first will give you a "
"grounding and make you appreciate how some of the frameworks that we will "
"discuss later can be incredibly useful. \n"
"Chapter 2, Designing a Great API, looks at what makes a good API. We will "
"introduce both REST and RPC, explaining the differences between them. We "
"will also examine the best practices for writing and versioning APIs. \n"
"Preface \n"
"Chapter 3, Introducing Docker, explains how you can wrap your application "
"into a Docker image and how you can use Docker and Docker Compose as part of "
"your development workflow. We will see how it is possible to build a small "
"lightweight image for your application and some good practices for using "
"Docker and writing Dockerfiles. \n"
"Chapter 4, Testing, will introduce the various techniques to ensure that "
"your microservices are of the highest quality. We will look at unit testing, "
"behavioral testing, and performance testing, providing you with practical "
"advice and knowledge of the core testing frameworks. \n"
"Chapter 5, Common Patterns, introduces some of the standard patterns often "
"employed in microservice architecture. We will take an in-depth look at load "
"balancing, circuit breaking, service discovery, and the autopilot pattern to "
"see what a Go-specific implementation for this would look like. \n"
"Chapter 6, Microservice Frameworks, builds on frameworks that implement many "
"of the common features needed for a microservice. We will compare and "
"contrast these through examples of their usage. \n"
"Chapter 7, Logging and Monitoring, examines essential techniques to ensure "
"that your service is behaving correctly, and when it does not, ensures you "
"have all the information at your disposal for successful diagnostics and "
"debugging. We will look at using StatsD for simple metrics and timings, how "
"to handle log file information, and approaches to logging more detailed data "
"and platforms such as NewRelic, which provides a holistic overview of your "
"service. \n"
"Chapter 8, Security, takes a look at authentication, authorization, and "
"security for your microservice. We will look at JWT and how you can "
"implement middleware for validating your requests and keeping things secure. "
"We will also look at the bigger picture, looking at why you should implement "
"TLS encryption and a principle of no trust between your services. \n"
"Chapter 9, Event-Driven Architecture, discusses that a common pattern to "
"allow your microservices to collaborate using Events; you will learn about "
"two of the most common eventing patterns and see how you can implement them "
"in Go. We will also look at the introduction of Domain-Driven Design and how "
"the use of a ubiquitous language can help your software development process. "
"\n"
"Chapter 10, Continuous Delivery, discusses the concepts behind continuous "
"delivery. We will then examine in detail a continuous delivery setup for one "
"of the simple applications we created earlier in the book. \n"
"[ 2 ] \n"
"Preface "
msgstr ""

#: ch0.txt:841
msgid ""
"What you need for this book \n"
"Go compiler for running your Go codes successfully. You can find it on "
"https://golang.or g. You also need Docker for container applications. "
"Dockers are available on https://www.doc ker.com/. "
msgstr ""

#: ch0.txt:844
msgid ""
"Who this book is for \n"
"If you are looking to apply techniques to your own projects by taking your "
"first steps into microservice architecture, this book is for you. "
msgstr ""

#: ch0.txt:859
msgid ""
"Conventions \n"
"In this book, you will find a number of text styles that distinguish between "
"different kinds of information. Here are some examples of these styles and "
"an explanation of their meaning. \n"
"Code words in text, database table names, folder names, filenames, file "
"extensions, pathnames, dummy URLs, user input, and Twitter handles are shown "
"as follows: \n"
"\"The @SpringBootApplication annotation replaces the different annotation "
"required in the Spring framework.\" \n"
"A block of code is set as follows: \n"
"@SpringBootApplication @EnableZuulProxy public class "
"ApiGatewayExampleInSpring {\n"
"  public static void main(String[] args)  {    SpringApplication.run("
"ApiGatewayExampleInSpring.class, args);  } } \n"
"[ 3 ] \n"
"Preface \n"
"Any command-line input or output is written as follows: \n"
"mvn spring-boot:run \n"
"New terms and important words are shown in bold. \n"
"Warnings or important notes appear like this. \n"
"Tips and tricks appear like this. "
msgstr ""

#: ch0.txt:863
msgid ""
"Reader feedback \n"
"Feedback from our readers is always welcome. Let us know what you think "
"about this book-what you liked or disliked. Reader feedback is important for "
"us as it helps us develop titles that you will really get the most out of. "
"To send us general feedback, simply e-mail feedback@packtpub.com, and "
"mention the book's title in the subject of your message. If there is a topic "
"that you have expertise in and you are interested in either writing or "
"contributing to a book, see our author guide at www.packtpub.com/authors. "
msgstr ""

#: ch0.txt:870
msgid ""
"Customer support \n"
"Now that you are the proud owner of a Packt book, we have a number of things "
"to help you to get the most from your purchase. \n"
"Downloading the example code \n"
"You can download the example code files for this book from your account at "
"http://www.p acktpub.com. If you purchased this book elsewhere, you can "
"visit http://www.packtpub.c om/supportand register to have the files e-"
"mailed directly to you. You can download the code files by following these "
"steps: \n"
"1. \n"
"Log in or register to our website using your e-mail address and password. "
msgstr ""

#: ch0.txt:873
msgid ""
"2. \n"
"Hover the mouse pointer on the SUPPORT tab at the top. "
msgstr ""

#: ch0.txt:876
msgid ""
"3. \n"
"Click on Code Downloads & Errata. "
msgstr ""

#: ch0.txt:879
msgid ""
"4. \n"
"Enter the name of the book in the Search box. "
msgstr ""

#: ch0.txt:882
msgid "[ 4 ] "
msgstr ""

#: ch0.txt:884
msgid "Preface "
msgstr ""

#: ch0.txt:887
msgid ""
"Piracy \n"
"Piracy of copyrighted material on the Internet is an ongoing problem across "
"all media. At Packt, we take the protection of our copyright and licenses "
"very seriously. If you come across any illegal copies of our works in any "
"form on the Internet, please provide us with the location address or website "
"name immediately so that we can pursue a remedy. Please contact us at "
"copyright@packtpub.com with a link to the suspected pirated material. We "
"appreciate your help in protecting our authors and our ability to bring you "
"valuable content. "
msgstr ""

#: ch0.txt:891
msgid ""
"Questions \n"
"If you have a problem with any aspect of this book, you can contact us at "
"questions@packtpub.com, and we will do our best to address the problem. \n"
"[ 6 ] "
msgstr ""
